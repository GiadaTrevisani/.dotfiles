proxy() {
    if [ "$PLATFORM"  = 'mac' ]; then
        local PROXY_INTERFACE="Wi-Fi"
        local PROXY_HOST=localhost
        local PROXY_PORT=19999

        # A host where ssh can login without interaction, with a key-based
        # authentication.
        # local SOCKS_PROC_USER="username"
        # local SOCKS_PROC_HOST="example.com"
        # local SOCKS_PROC_IDENTITY="~/.ssh/id_rsa"

        local SOCKS_PROC_LOG=/tmp/ssh-socks-proxy-log.txt
        local SOCKS_PROC_PIDFILE=/tmp/ssh-socks-proxy-pid.txt

        if [[ $1 == "on" ]]; then
            # local SOCKS_PROC_CMD="ssh -i $SOCKS_PROC_IDENTITY -t -t -D $PROXY_HOST:$PROXY_PORT $SOCKS_PROC_USER@$SOCKS_PROC_HOST"
            local SOCKS_PROC_CMD="ssh -D $PROXY_PORT -C -N $2"

            echo "$SOCKS_PROC_CMD"

            nohup "$SOCKS_PROC_CMD" > "$SOCKS_PROC_LOG" 2>&1 &
            echo $! > "$SOCKS_PROC_PIDFILE"

            sudo networksetup -setsocksfirewallproxy "$PROXY_INTERFACE" $PROXY_HOST $PROXY_PORT
            echo "SOCKS proxy enabled"

        elif [[ $1 == "off" ]]; then
            sudo kill -9 $(cat "$SOCKS_PROC_PIDFILE")
            rm "$SOCKS_PROC_PIDFILE"

            sudo networksetup -setsocksfirewallproxystate "$PROXY_INTERFACE" off
            echo "SOCKS proxy disabled"

        elif [[ $1 == "status" ]]; then
            echo "======================================================"
            echo "Network Services:"
            echo "======================================================"
            networksetup -listallnetworkservices
            echo
            echo "======================================================"
            echo "Current SOCKS Proxy Settings:"
            echo "======================================================"
            networksetup -getsocksfirewallproxy "$PROXY_INTERFACE"
            echo

        else
            echo "`basename $0` toggles SOCKS proxy settings on OS X"
            echo
            echo "Usage: "
            echo "  $ proxy on <hostname>  # turns SOCKS proxy on"
            echo "  $ proxy off            # turns SOCKS proxy off"
            echo "  $ proxy status         # prints status of proxy settings"
            echo
            echo "proxy interface:      " $PROXY_INTERFACE
            echo "proxy host:           " $PROXY_HOST
            echo "proxy port:           " $PROXY_PORT
            echo
            return 65 # end process with error to indicate incorrect arguments
        fi
    else
        echo "This function is only available on macOS"
        return 1;
    fi
}

proxy "$@"